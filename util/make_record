#!/usr/bin/env perl
use v5.10;
use strict;
use experimental qw(signatures);

=head1 NAME

make_record - turn a CVE into a CPANSA YAML object

=head1 SYNOPSIS

Give this program a CVE ID and see what it does. It guesses the CPAN
module name, so you need to check that:

Try it with just the CVE:

	$ perl util/make_record CVE-2011-4117
	---
	- affected_versions: ~
	  cves:
		- CVE-2011-4117
	  description: The Batch::BatchRun module 1.03 for Perl does not properly handle temporary files.
	  distribution: Batch-BatchRun
	  fixed_versions: ~
	  id: CPANSA-Batch-BatchRun-2011-4117
	  references:
		- http://www.openwall.com/lists/oss-security/2011/11/04/2
		- http://www.openwall.com/lists/oss-security/2011/11/04/4
		- https://rt.cpan.org/Public/Bug/Display.html?id=69594
	  reported: 2020-01-31
	  severity: high

Sometimes it can't guess the package, so run it again:

	$ perl util/make_record CVE-2011-4117 Some-Package

=cut

my %hash;
$hash{cves}  = $ARGV[0] // die "Need CVE argument\n";
$hash{distribution}  = $ARGV[1] if @ARGV > 1;
$hash{distribution} =~ s/::/-/g;

my $serial = $hash{cves} =~ s/\ACVE-//r;

my $base = 'https://services.nvd.nist.gov/rest/json/cve/1.0';
use Mojo::UserAgent;
my $json = Mojo::UserAgent->new->get( "$base/$hash{cves}" )->result->json;
my $item = $json->{result}{CVE_Items}[0];

$hash{description}       = $item->{cve}{description}{description_data}[0]{value};
$hash{description}  =~ s/\v/ /g;

my @references = map { $_->{url} } $item->{cve}{references}{reference_data}->@*;
$hash{references} = \@references;

$hash{reported} = $item->{publishedDate} =~ s/T.*//r;
$hash{cves} = [ $hash{cves} ];

$hash{severity} = eval { lc $item->{impact}{baseMetricV3}{cvssV3}{baseSeverity} } || undef;

my $package = guess_package( $item );
$package =~ s/::/-/g;

$hash{distribution} = $package unless defined $hash{distribution};
$hash{id} = sprintf 'CPANSA-%s-%s', $package, $serial;

$hash{affected_versions} = undef;
$hash{fixed_versions} = undef;

use YAML qw(Dump);
say Dump( [\%hash] );

sub guess_package ( $item ) {
	my @urls = map { Mojo::URL->new($_->{url}) } $item->{cve}{references}{reference_data}->@*;

	my( $metacpan ) = grep { $_->host =~ /metacpan\.org\z/ } @urls;
	if( defined $metacpan ) {
		return $1 if $metacpan =~ m<https://metacpan.org/(pod|dist)/(.*?)(\z|/)>;
		}

	my( $search ) = grep { $_->host =~ /search\.cpan\.org\z/ } @urls;
	if( defined $search ) {
		say "SEARCH: $search";
		}

	if( $item->{cve}{description}{description_data}[0]{value} =~ /\b ( [A-Z][A-Z0-9_]+(?:::[A-Z][A-Z0-9_]+)+ ) \b/xi ) {
		return $1
		}
	}

# This hasn't turned out so usefule
sub parse_cpe23uri ( $cpe23uri ) {
	state @keys = qw(
		prefix
		version
		part
		vendor
		product
		version
		update
		edition
		language
		sw_edition
		target_sw
		target_hw
		other
		);

	state $pattern = qr{  # colons not escaped
		(?<!
			\\
		)
		:
		}x;

	my %hash;
	@hash{@keys} = map { s|\\||gr } split /$pattern/, $cpe23uri;
	return \%hash;
	}

